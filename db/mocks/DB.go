// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/anitschke/photo-db-fs/types"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// ChildrenTags provides a mock function with given fields: ctx, parent
func (_m *DB) ChildrenTags(ctx context.Context, parent types.Tag) ([]types.Tag, error) {
	ret := _m.Called(ctx, parent)

	var r0 []types.Tag
	if rf, ok := ret.Get(0).(func(context.Context, types.Tag) []types.Tag); ok {
		r0 = rf(ctx, parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Tag) error); ok {
		r1 = rf(ctx, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Photos provides a mock function with given fields: ctx, q
func (_m *DB) Photos(ctx context.Context, q types.Query) ([]types.Photo, error) {
	ret := _m.Called(ctx, q)

	var r0 []types.Photo
	if rf, ok := ret.Get(0).(func(context.Context, types.Query) []types.Photo); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Photo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Query) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ratings provides a mock function with given fields:
func (_m *DB) Ratings() []float64 {
	ret := _m.Called()

	var r0 []float64
	if rf, ok := ret.Get(0).(func() []float64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	return r0
}

// RootTags provides a mock function with given fields: ctx
func (_m *DB) RootTags(ctx context.Context) ([]types.Tag, error) {
	ret := _m.Called(ctx)

	var r0 []types.Tag
	if rf, ok := ret.Get(0).(func(context.Context) []types.Tag); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
